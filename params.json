{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Webmatrix.executer","google":"UA-35175719-1","body":"# WebMatrix.Executer\r\n\r\n## Introduction\r\n\r\nThe WebMatrix Extensibility Model does not support out of the box the executing\r\nof applications and scripts, an output pane, and an Error List pane that may \r\nbe used by WebMatrix Extension Writers. Although there is an Error List pane \r\navailable, this pane may not be used by custom extensions.\r\n\r\n**WebMatrix.Executer** provides a library that can be included in your own baked\r\nWebMatrix extension to execute applications and PowerShell scripts, send \r\nthe output in realtime to a WebMatrix **Output** pane, and parse the output for \r\nerrors and warnings that are displayed in a WebMatrix **Errors & Warnings** pane\r\nwith just a few lines of code. Multiple extensions using **WebMatrix.Executer**\r\nwill use the same panes.\r\n\r\n## The provided functionality\r\n**WebMatrix.Executer** provides two panes:\r\n\r\n- The Output pane where the output of an executing program is captured (StdOut, StdErr)\r\n- The Errors & Warnings pane where the errors and warnings found by parsing the output are reported\r\n\r\n**WebMatrix.Executer** can execute applications and PowerShell scripts asynchronuously, and capture \r\nthe output and the errors & warnings in realtime to the two panes.\r\nApplications and scripts are executed under a \"task source\", this is a simple string identifier that specifies\r\nto which \"group\" an application or script belongs. The **Output** pane can be switched to the output of a task \r\nsource, the **Errors & Warnings** pane can be filtered on the task source.\r\n\r\n### The Output pane\r\n![The Output pane](http://macawnl.github.com/WebMatrix.Executer/img/OutputPane.png)\r\n\r\n- The Output pane support multiple task sources\r\n- When an executing task has output, the Output pane is made visible\r\n- Output of an executing task (StdOut, StdErr) is displayed real-time\r\n- The output per task source can be selected through a drop down box\r\n- The output of a task source can be cleared\r\n- The output of a task source can be word-wrapped\r\n- A task (running program or script) executing under a task source can be canceled\r\n- When the output of a task contains errors or warnings, **WebMatrix.Executer** switches\r\n   automatically to the Errors & Warnings pane\r\n\r\n### The Errors & Warnings pane\r\n![The Errors & Warnings pane](http://macawnl.github.com/WebMatrix.Executer/img//ErrorsAndWarningsPane.png)\r\n\r\n- The Errors & Warnings pane displays the error and warning messages of all task sources\r\n- Output of an executing task (StdOut, StdErr) is parsed real-time for erros and warnings\r\n- Error and warning messages are visualized using an error and warning icon\r\n- The messages can be filtered on task source (all, one), errors, warnings\r\n- The messages can be cleared\r\n- If a message contains a reference to a file, the path is displayed relative to the root of the WebMatrix (~/...)\r\n- If a message contains a reference to a file, and the file can't be resolved, the original file path is displayed\r\n- If a message is clicked, the corresponding file is opened in the editor at the correct line (if known) \r\n   and correct column (if known)\r\n- If a message is clicked and the file can't be resolved, a message box is displayed specifying the file, line and column\r\n- If a message contains an url, the url is used as a help link and a help icon appears\r\n\r\n## Background Information\r\n\r\n[WebMatrix extensions](http://extensions.webmatrix.com/) are [MEF](http://msdn.microsoft.com/en-us/library/dd460648.aspx)\r\nextensions that are loaded dynamically from the folder `%USERPROFILE%\\AppData\\Local\\Microsoft\\WebMatrix\\Extensions\\20`.\r\nWebMatrix extensions are easy to develop. The [How to Create Extensions](http://extensions.webmatrix.com/documentation_2)\r\npage by Microsoft gets you started with pointers to a Visual Studio template and the WebMatrix Extensibility API documentation.\r\n\r\n**WebMatrix.Executer** provides a good base when writing extensions that need a kind of \"compilation\" \r\nwith output and error reporting. Because the **WebMatrix.Executer** functionality could be used by \r\nmultiple extensions, also extensions not written by you, and we don't want multiple output tabs, only \r\none version of the code should be running. To accomplish this you will program against an interface \r\nwith available methods that is independent from the actual implementation, and **Webmatrix.Executer**\r\nwill make sure that only a single instance of the implementation assembly is running, and that always\r\nthe newest version available in all extensions will be running.\r\n\r\nThe interface is defined in the `DesignFactory.WebMatrix.IExecuter.dll` assembly . The `DesignFactory.WebMatrix.ExecuterFactory.dll` \r\nassembly contains a smart piece of code that makes sure that the first WebMatrix extension that uses **WebMatrix.Executer**,\r\nand that is loaded through MEF, loads the latest version of the **WebMatrix.Executer**\r\nimplementation assembly `DesignFactory.WebMatrix.Executer.dll` as available in each of the extension folders. The interface will never change \r\nor remove methods signatures, it will only be extended to ensure backwards \r\ncompatibility to older extensions while enabling innovations in \r\nWebMatrix.Executer itself.\r\n\r\n## Distribution of WebMatrix.Executer: NuGet\r\n**WebMatrix.Executer** is distributed as a [NuGet](http://nuget.org/packages/WebMatrix.Executer) \r\npackage. The package is named **WebMatrix.Executer**. The **WebMatrix.Executer** NuGet \r\npackage consists of the following assemblies:\r\n\r\n- `DesignFactory.WebMatrix.IExecuter.dll`\r\n\r\nThis is the interface assembly to program against. This assembly will be \r\nreferenced by your project.\r\n\r\n- `DesignFactory.WebMatrix.ExecuterFactory.dll`\r\n\r\nThis assembly contains the `ExecuterFactory()` function to load the newest version of \r\nthe `DesignFactory.WebMatrix.Executer.dll` implementation assembly. This \r\nassembly will be referenced by your project.\r\n\r\n- `DesignFactory.WebMatrix.Executer.dll`\r\n\r\nThis assembly contains the actual implementation of the interface, and the interface \r\nitself as an embedded type. See for more background information:\r\nhttp://msdn.microsoft.com/en-us/library/dd409610.aspx.\r\nThis assembly is NOT referenced, but will be copied to the output directory\r\nalongside your extension assembly, the interface assembly and the factory assembly.\r\n\r\n## Using **WebMatrix.Extender** in your extension\r\n\r\nTo enable **WebMatrix.Executer** functionality, in your extension,\r\nthe extensions needs an implementation as simple as:\r\n\r\n\tnamespace MyLittleWebMatrixExtension\r\n\t{\r\n\t    /// <summary>\r\n\t    /// A sample WebMatrix extension.\r\n\t    /// </summary>\r\n\t    [Export(typeof(Extension))]\r\n\t    public class MyLittleWebMatrixExtension : Extension\r\n\t    {\r\n\t        /// <summary>\r\n\t        /// Stores a reference to the WebMatrix host interface.\r\n\t        /// </summary>\r\n\t        private IWebMatrixHost _webMatrixHost;\r\n\t\r\n\t        /// <summary>\r\n\t        /// Reference to the EditorTaskPanelService.\r\n\t        /// </summary>\r\n\t        private IEditorTaskPanelService _editorTaskPanel;\r\n\t\r\n\t        [Import(typeof(IEditorTaskPanelService))]\r\n\t        private IEditorTaskPanelService EditorTaskPanelService\r\n\t        {\r\n\t            get\r\n\t            {\r\n\t                return _editorTaskPanel;\r\n\t            }\r\n\t            set\r\n\t            {\r\n\t                _editorTaskPanel = value;\r\n\t            }\r\n\t        }\r\n\t\r\n\t        DesignFactory.WebMatrix.IExecuter.IExecuter _executer;\r\n\t\r\n\t        /// <summary>\r\n\t        /// Initializes a new instance of the MyLittleWebMatrixExtension class.\r\n\t        /// </summary>\r\n\t        public MyLittleWebMatrixExtension()\r\n\t            : base(\"MyLittleWebMatrixExtension\")\r\n\t        {\r\n\t        }\r\n\t\r\n\t        /// <summary>\r\n\t        /// Called to initialize the extension.\r\n\t        /// </summary>\r\n\t        /// <param name=\"host\">WebMatrix host interface.</param>\r\n\t        /// <param name=\"initData\">Extension initialization data.</param>\r\n\t        protected override void Initialize(IWebMatrixHost host, \r\n\t                                           ExtensionInitData initData)\r\n\t        {\r\n\t            _webMatrixHost = host;\r\n\t\r\n                // Add a simple button to the Ribbon\r\n                initData.RibbonItems.Add(\r\n                    new RibbonGroup(\"DoIt Group\",new RibbonItem[]\r\n                       {new RibbonButton(\"Just DoIt\",\r\n                        new DelegateCommand(HandleRibbonButtonInvoke),\r\n                        null, _starImageSmall, _starImageLarge)}));\r\n\t        \r\n\t            _executer = DesignFactory.WebMatrix.ExecuterFactory.GetExecuter(\r\n\t                            \"DoIt\", _webMatrixHost, _editorTaskPanel);\r\n\t        }\r\n\r\n\t        /// <summary>\r\n\t        /// Called when the Ribbon button is invoked.\r\n\t        /// </summary>\r\n\t        /// <param name=\"parameter\">Unused.</param>\r\n\t        private async void HandleRibbonButtonInvoke(object parameter)\r\n\t        {\r\n\t            string scriptDoIt = Path.Combine(_webMatrixHost.WebSite.Path, @\"WebMatrixTests\\DoIt.bat\");\r\n\t            await _executer.RunAsync(\"cmd.exe\", \"/c \\\"\" + scriptDoIt + \"\\\"\");\r\n\t        }\t    \r\n\t    }\r\n\t}\r\n\r\nNote the `EditorTaskPanelService` stuff, we need this to be able to create the\r\nOutput and Errors & Warnings panes.\r\n\r\nThe `DesignFactory.WebMatrix.ExecuterFactory.GetExecuter(...)` call requires three\r\nparameters:\r\n\r\n`string tasksource`:  Specifies the group name where tasks from this executer\r\nare executed under. This name is shown as selector in the Output pane and\r\ncan be used to filter errors and warnings.\r\n\r\n`IWebMatrixHost webMatrixHost`: the WebMatrix host, available as parameter to\r\nthe `Initialize()` method in your WebMatrix extension.\r\n\r\n`IEditorTaskPanelService editorTaskPanelService`: Reference to the \r\n`EditorTaskPanelService`, see example code above on how to get it.\r\n\r\nIn the `GetExecuter(...)` call the **WebMatrix.Executer** system is initialized and the tabs are\r\ncreated for the **Output** pane and **Errors & Warnings** pane.\r\n\r\nThe call to `GetExecuter(...)` returns an\r\ninstance of an object that implements the following interface:\r\n\r\n\tnamespace DesignFactory.WebMatrix.IExecuter\r\n\t{\r\n\t    public interface IExecuter\r\n\t    {\r\n\t        System.Threading.Tasks.Task<bool> RunAsync(string fileName, \r\n\t                                                   string arguments);\r\n\t        System.Threading.Tasks.Task<bool> RunPowerShellAsync(string arguments);\r\n\t        bool IsRunning();\r\n\t        void Cancel();\r\n\t        void Write(string format, params object[] args);\r\n\t        void WriteLine(string format, params object[] args);\r\n\t\r\n\t        // Only used by DesignFactory.WebMatrix.ExecuterFactory.GetExecuter()\r\n\t        void Initialize(string tasksource, IWebMatrixHost webMatrixHost, \r\n\t                        IEditorTaskPanelService editorTaskPanelService);\r\n\t        void InitializeTabs();\r\n\t    }\r\n\t}\r\n\r\nThese methods do the following:\r\n\r\n`RunAsync`: Execute an application with parameters async. Returns true if\r\nsuccessful, false otherwise. Output (StdOut, Stderr) is written to output pane\r\nand parsed for errors and warnings.\r\nExample: \r\n\r\n\tstring scriptDoIt = Path.Combine(_webMatrixHost.WebSite.Path, \r\n\t                                 @\"WebMatrixTests\\DoIt.bat\");\r\n\tvar ok = await _executer.RunAsync(\"cmd.exe\", \"/c \\\"\" + scriptDoIt + \"\\\"\");\r\n\r\n`RunPowerShellAsync`: Execute a powershell command (in the arguments) in a\r\n64 bits PowerShell process on a 64 bits Windows, and in a 32 bits PowerShell\r\nprocess on a 32 bits Windows. Even if WebMatrix is running as 32 bits app.\r\nArguments are all the arguments as you would pass to PowerShell.exe.\r\nOutput (StdOut, Stderr) is written to output pane\r\nand parsed for errors and warnings.\r\n\r\n`IsRunning`: Returns true if executer is executing, false otherwise.\r\n\r\n`Cancel`: Cancel the currently running process in the executer.\r\n\r\n`Write`, `WriteLine`: Write output to the Output pane.\r\n\r\n`Initialize`: Initialize the executer system. Called by the \r\n`ExecuterFactory.GetExecuter()` method. Not for use by extension developer.\r\n\r\n`InitializeTabs`: Initialze the tabs for the executer system. also called by\r\n`ExecuterFactory.GetExecuter()` method. Not for use by extension developer.","tagline":"Simply create WebMatrix 2 extensions that execute commands, capture output and parse for errors and warnings."}